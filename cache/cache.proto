syntax = "proto3";
	
package cache;

service Cache {
  // streams cache request/response
  rpc Stream(stream CacheRequest) returns (stream CacheResponse) {}
  // single cache request/response
  rpc Call(CacheRequest) returns (CacheResponse) {}
  // convenience calls for all cache operations. these
  // just add the Operation and forward on to Call
  rpc Set(CacheRequest) returns (CacheResponse) {}
  rpc Cas(CacheRequest) returns (CacheResponse) {}
  rpc Get(CacheRequest) returns (CacheResponse) {}
  rpc Gets(CacheRequest) returns (CacheResponse) {}
  rpc Add(CacheRequest) returns (CacheResponse) {}
  rpc Replace(CacheRequest) returns (CacheResponse) {}
  rpc Delete(CacheRequest) returns (CacheResponse) {}
  rpc Touch(CacheRequest) returns (CacheResponse) {}
  rpc Append(CacheRequest) returns (CacheResponse) {}
  rpc Prepend(CacheRequest) returns (CacheResponse) {}
  rpc Increment(CacheRequest) returns (CacheResponse) {}
  rpc Decrement(CacheRequest) returns (CacheResponse) {}
  rpc FlushAll(CacheRequest) returns (CacheResponse) {}
}

// CacheItem encapsulates any in/out cache values into a single message
// structure. Some values may not be pertinent in some situations (i.e. you
// can't set the cas).
message CacheItem {
  string key = 1;
  bytes value = 2;
  uint64 ttl = 3;
  uint64 cas = 4;
}

message CacheRequest {
  enum Operation {
    NOOP = 0;
    SET = 1;
    CAS = 2;
    GET = 3;
    GETS = 4;
    ADD = 5;
    REPLACE = 6;
    DELETE = 7;
    TOUCH = 8;
    APPEND = 9;
    PREPEND = 10;
    INCREMENT = 11;
    DECREMENT = 12;
    FLUSHALL = 13;
  }

  Operation operation = 1;
  CacheItem item = 2;
  bytes append = 3;
  bytes prepend = 4;
  uint64 increment = 5;
  uint64 decrement = 6;
}

message CacheResponse {
  CacheItem item = 1;
}

