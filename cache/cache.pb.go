// Code generated by protoc-gen-go.
// source: cache.proto
// DO NOT EDIT!

/*
Package cache is a generated protocol buffer package.

It is generated from these files:
	cache.proto

It has these top-level messages:
	CacheItem
	CacheRequest
	CacheResponse
*/
package cache

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CacheRequest_Operation int32

const (
	CacheRequest_NOOP      CacheRequest_Operation = 0
	CacheRequest_SET       CacheRequest_Operation = 1
	CacheRequest_CAS       CacheRequest_Operation = 2
	CacheRequest_GET       CacheRequest_Operation = 3
	CacheRequest_GETS      CacheRequest_Operation = 4
	CacheRequest_ADD       CacheRequest_Operation = 5
	CacheRequest_REPLACE   CacheRequest_Operation = 6
	CacheRequest_DELETE    CacheRequest_Operation = 7
	CacheRequest_TOUCH     CacheRequest_Operation = 8
	CacheRequest_APPEND    CacheRequest_Operation = 9
	CacheRequest_PREPEND   CacheRequest_Operation = 10
	CacheRequest_INCREMENT CacheRequest_Operation = 11
	CacheRequest_DECREMENT CacheRequest_Operation = 12
	CacheRequest_FLUSHALL  CacheRequest_Operation = 13
)

var CacheRequest_Operation_name = map[int32]string{
	0:  "NOOP",
	1:  "SET",
	2:  "CAS",
	3:  "GET",
	4:  "GETS",
	5:  "ADD",
	6:  "REPLACE",
	7:  "DELETE",
	8:  "TOUCH",
	9:  "APPEND",
	10: "PREPEND",
	11: "INCREMENT",
	12: "DECREMENT",
	13: "FLUSHALL",
}
var CacheRequest_Operation_value = map[string]int32{
	"NOOP":      0,
	"SET":       1,
	"CAS":       2,
	"GET":       3,
	"GETS":      4,
	"ADD":       5,
	"REPLACE":   6,
	"DELETE":    7,
	"TOUCH":     8,
	"APPEND":    9,
	"PREPEND":   10,
	"INCREMENT": 11,
	"DECREMENT": 12,
	"FLUSHALL":  13,
}

func (x CacheRequest_Operation) String() string {
	return proto.EnumName(CacheRequest_Operation_name, int32(x))
}
func (CacheRequest_Operation) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

// CacheItem encapsulates any in/out cache values into a single message
// structure. Some values may not be pertinent in some situations (i.e. you
// can't set the cas).
type CacheItem struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Ttl   uint64 `protobuf:"varint,3,opt,name=ttl" json:"ttl,omitempty"`
	Cas   uint64 `protobuf:"varint,4,opt,name=cas" json:"cas,omitempty"`
}

func (m *CacheItem) Reset()                    { *m = CacheItem{} }
func (m *CacheItem) String() string            { return proto.CompactTextString(m) }
func (*CacheItem) ProtoMessage()               {}
func (*CacheItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CacheItem) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CacheItem) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CacheItem) GetTtl() uint64 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *CacheItem) GetCas() uint64 {
	if m != nil {
		return m.Cas
	}
	return 0
}

type CacheRequest struct {
	Operation CacheRequest_Operation `protobuf:"varint,1,opt,name=operation,enum=cache.CacheRequest_Operation" json:"operation,omitempty"`
	Item      *CacheItem             `protobuf:"bytes,2,opt,name=item" json:"item,omitempty"`
	Append    []byte                 `protobuf:"bytes,3,opt,name=append,proto3" json:"append,omitempty"`
	Prepend   []byte                 `protobuf:"bytes,4,opt,name=prepend,proto3" json:"prepend,omitempty"`
	Increment uint64                 `protobuf:"varint,5,opt,name=increment" json:"increment,omitempty"`
	Decrement uint64                 `protobuf:"varint,6,opt,name=decrement" json:"decrement,omitempty"`
}

func (m *CacheRequest) Reset()                    { *m = CacheRequest{} }
func (m *CacheRequest) String() string            { return proto.CompactTextString(m) }
func (*CacheRequest) ProtoMessage()               {}
func (*CacheRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CacheRequest) GetOperation() CacheRequest_Operation {
	if m != nil {
		return m.Operation
	}
	return CacheRequest_NOOP
}

func (m *CacheRequest) GetItem() *CacheItem {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *CacheRequest) GetAppend() []byte {
	if m != nil {
		return m.Append
	}
	return nil
}

func (m *CacheRequest) GetPrepend() []byte {
	if m != nil {
		return m.Prepend
	}
	return nil
}

func (m *CacheRequest) GetIncrement() uint64 {
	if m != nil {
		return m.Increment
	}
	return 0
}

func (m *CacheRequest) GetDecrement() uint64 {
	if m != nil {
		return m.Decrement
	}
	return 0
}

type CacheResponse struct {
	Item *CacheItem `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
}

func (m *CacheResponse) Reset()                    { *m = CacheResponse{} }
func (m *CacheResponse) String() string            { return proto.CompactTextString(m) }
func (*CacheResponse) ProtoMessage()               {}
func (*CacheResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CacheResponse) GetItem() *CacheItem {
	if m != nil {
		return m.Item
	}
	return nil
}

func init() {
	proto.RegisterType((*CacheItem)(nil), "cache.CacheItem")
	proto.RegisterType((*CacheRequest)(nil), "cache.CacheRequest")
	proto.RegisterType((*CacheResponse)(nil), "cache.CacheResponse")
	proto.RegisterEnum("cache.CacheRequest_Operation", CacheRequest_Operation_name, CacheRequest_Operation_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Cache service

type CacheClient interface {
	Call(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error)
	Set(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error)
	Cas(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error)
	Get(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error)
	Gets(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error)
	Add(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error)
	Replace(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error)
	Delete(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error)
	Touch(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error)
	Append(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error)
	Prepend(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error)
	Increment(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error)
	Decrement(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error)
	FlushAll(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error)
}

type cacheClient struct {
	cc *grpc.ClientConn
}

func NewCacheClient(cc *grpc.ClientConn) CacheClient {
	return &cacheClient{cc}
}

func (c *cacheClient) Call(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error) {
	out := new(CacheResponse)
	err := grpc.Invoke(ctx, "/cache.Cache/Call", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Set(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error) {
	out := new(CacheResponse)
	err := grpc.Invoke(ctx, "/cache.Cache/Set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Cas(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error) {
	out := new(CacheResponse)
	err := grpc.Invoke(ctx, "/cache.Cache/Cas", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Get(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error) {
	out := new(CacheResponse)
	err := grpc.Invoke(ctx, "/cache.Cache/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Gets(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error) {
	out := new(CacheResponse)
	err := grpc.Invoke(ctx, "/cache.Cache/Gets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Add(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error) {
	out := new(CacheResponse)
	err := grpc.Invoke(ctx, "/cache.Cache/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Replace(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error) {
	out := new(CacheResponse)
	err := grpc.Invoke(ctx, "/cache.Cache/Replace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Delete(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error) {
	out := new(CacheResponse)
	err := grpc.Invoke(ctx, "/cache.Cache/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Touch(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error) {
	out := new(CacheResponse)
	err := grpc.Invoke(ctx, "/cache.Cache/Touch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Append(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error) {
	out := new(CacheResponse)
	err := grpc.Invoke(ctx, "/cache.Cache/Append", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Prepend(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error) {
	out := new(CacheResponse)
	err := grpc.Invoke(ctx, "/cache.Cache/Prepend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Increment(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error) {
	out := new(CacheResponse)
	err := grpc.Invoke(ctx, "/cache.Cache/Increment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Decrement(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error) {
	out := new(CacheResponse)
	err := grpc.Invoke(ctx, "/cache.Cache/Decrement", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) FlushAll(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error) {
	out := new(CacheResponse)
	err := grpc.Invoke(ctx, "/cache.Cache/FlushAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cache service

type CacheServer interface {
	Call(context.Context, *CacheRequest) (*CacheResponse, error)
	Set(context.Context, *CacheRequest) (*CacheResponse, error)
	Cas(context.Context, *CacheRequest) (*CacheResponse, error)
	Get(context.Context, *CacheRequest) (*CacheResponse, error)
	Gets(context.Context, *CacheRequest) (*CacheResponse, error)
	Add(context.Context, *CacheRequest) (*CacheResponse, error)
	Replace(context.Context, *CacheRequest) (*CacheResponse, error)
	Delete(context.Context, *CacheRequest) (*CacheResponse, error)
	Touch(context.Context, *CacheRequest) (*CacheResponse, error)
	Append(context.Context, *CacheRequest) (*CacheResponse, error)
	Prepend(context.Context, *CacheRequest) (*CacheResponse, error)
	Increment(context.Context, *CacheRequest) (*CacheResponse, error)
	Decrement(context.Context, *CacheRequest) (*CacheResponse, error)
	FlushAll(context.Context, *CacheRequest) (*CacheResponse, error)
}

func RegisterCacheServer(s *grpc.Server, srv CacheServer) {
	s.RegisterService(&_Cache_serviceDesc, srv)
}

func _Cache_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.Cache/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Call(ctx, req.(*CacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.Cache/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Set(ctx, req.(*CacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Cas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Cas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.Cache/Cas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Cas(ctx, req.(*CacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.Cache/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Get(ctx, req.(*CacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Gets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Gets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.Cache/Gets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Gets(ctx, req.(*CacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.Cache/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Add(ctx, req.(*CacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Replace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Replace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.Cache/Replace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Replace(ctx, req.(*CacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.Cache/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Delete(ctx, req.(*CacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Touch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Touch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.Cache/Touch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Touch(ctx, req.(*CacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.Cache/Append",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Append(ctx, req.(*CacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Prepend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Prepend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.Cache/Prepend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Prepend(ctx, req.(*CacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Increment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Increment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.Cache/Increment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Increment(ctx, req.(*CacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Decrement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Decrement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.Cache/Decrement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Decrement(ctx, req.(*CacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_FlushAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).FlushAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.Cache/FlushAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).FlushAll(ctx, req.(*CacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cache.Cache",
	HandlerType: (*CacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _Cache_Call_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Cache_Set_Handler,
		},
		{
			MethodName: "Cas",
			Handler:    _Cache_Cas_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Cache_Get_Handler,
		},
		{
			MethodName: "Gets",
			Handler:    _Cache_Gets_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Cache_Add_Handler,
		},
		{
			MethodName: "Replace",
			Handler:    _Cache_Replace_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Cache_Delete_Handler,
		},
		{
			MethodName: "Touch",
			Handler:    _Cache_Touch_Handler,
		},
		{
			MethodName: "Append",
			Handler:    _Cache_Append_Handler,
		},
		{
			MethodName: "Prepend",
			Handler:    _Cache_Prepend_Handler,
		},
		{
			MethodName: "Increment",
			Handler:    _Cache_Increment_Handler,
		},
		{
			MethodName: "Decrement",
			Handler:    _Cache_Decrement_Handler,
		},
		{
			MethodName: "FlushAll",
			Handler:    _Cache_FlushAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cache.proto",
}

func init() { proto.RegisterFile("cache.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 487 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x5d, 0x8b, 0xd3, 0x4c,
	0x14, 0xde, 0x6c, 0x3e, 0xda, 0x9c, 0xb6, 0x2f, 0xc3, 0xbc, 0x8b, 0x04, 0x51, 0x28, 0xc1, 0x8b,
	0x5e, 0xf5, 0xa2, 0x75, 0x55, 0xf0, 0x2a, 0x24, 0xb3, 0xdd, 0x42, 0x6c, 0xc3, 0x24, 0x8b, 0xd7,
	0x31, 0x3d, 0xd0, 0x62, 0x9a, 0xc4, 0x66, 0x2a, 0x78, 0xeb, 0x0f, 0xf0, 0x97, 0xf8, 0x23, 0x65,
	0x26, 0x6d, 0x77, 0x05, 0x11, 0xc6, 0xbb, 0xf3, 0x7c, 0xf5, 0x3c, 0x9d, 0x64, 0x02, 0x83, 0x22,
	0x2f, 0xb6, 0x38, 0x6d, 0x0e, 0xb5, 0xa8, 0xa9, 0xad, 0x80, 0xff, 0x11, 0xdc, 0x50, 0x0e, 0x4b,
	0x81, 0x7b, 0x4a, 0xc0, 0xfc, 0x8c, 0xdf, 0x3c, 0x63, 0x6c, 0x4c, 0x5c, 0x2e, 0x47, 0x7a, 0x03,
	0xf6, 0xd7, 0xbc, 0x3c, 0xa2, 0x77, 0x3d, 0x36, 0x26, 0x43, 0xde, 0x01, 0xe9, 0x13, 0xa2, 0xf4,
	0xcc, 0xb1, 0x31, 0xb1, 0xb8, 0x1c, 0x25, 0x53, 0xe4, 0xad, 0x67, 0x75, 0x4c, 0x91, 0xb7, 0xfe,
	0x0f, 0x13, 0x86, 0xea, 0x97, 0x39, 0x7e, 0x39, 0x62, 0x2b, 0xe8, 0x7b, 0x70, 0xeb, 0x06, 0x0f,
	0xb9, 0xd8, 0xd5, 0x95, 0x5a, 0xf1, 0xdf, 0xec, 0xe5, 0xb4, 0x6b, 0xf4, 0xd4, 0x37, 0x5d, 0x9f,
	0x4d, 0xfc, 0xd1, 0x4f, 0x5f, 0x81, 0xb5, 0x13, 0xb8, 0x57, 0x35, 0x06, 0x33, 0xf2, 0x34, 0x27,
	0x9b, 0x73, 0xa5, 0xd2, 0x67, 0xe0, 0xe4, 0x4d, 0x83, 0xd5, 0x46, 0x55, 0x1b, 0xf2, 0x13, 0xa2,
	0x1e, 0xf4, 0x9a, 0x03, 0x2a, 0xc1, 0x52, 0xc2, 0x19, 0xd2, 0x17, 0xe0, 0xee, 0xaa, 0xe2, 0x80,
	0x7b, 0xac, 0x84, 0x67, 0xab, 0xf6, 0x8f, 0x84, 0x54, 0x37, 0x78, 0x56, 0x9d, 0x4e, 0xbd, 0x10,
	0xfe, 0x4f, 0x03, 0xdc, 0x4b, 0x59, 0xda, 0x07, 0x6b, 0xb5, 0x5e, 0x27, 0xe4, 0x8a, 0xf6, 0xc0,
	0x4c, 0x59, 0x46, 0x0c, 0x39, 0x84, 0x41, 0x4a, 0xae, 0xe5, 0xb0, 0x60, 0x19, 0x31, 0xa5, 0x69,
	0xc1, 0xb2, 0x94, 0x58, 0x92, 0x0a, 0xa2, 0x88, 0xd8, 0x74, 0x00, 0x3d, 0xce, 0x92, 0x38, 0x08,
	0x19, 0x71, 0x28, 0x80, 0x13, 0xb1, 0x98, 0x65, 0x8c, 0xf4, 0xa8, 0x0b, 0x76, 0xb6, 0x7e, 0x08,
	0xef, 0x49, 0x5f, 0xd2, 0x41, 0x92, 0xb0, 0x55, 0x44, 0x5c, 0xe9, 0x4f, 0x38, 0x53, 0x00, 0xe8,
	0x08, 0xdc, 0xe5, 0x2a, 0xe4, 0xec, 0x03, 0x5b, 0x65, 0x64, 0x20, 0x61, 0xc4, 0xce, 0x70, 0x48,
	0x87, 0xd0, 0xbf, 0x8b, 0x1f, 0xd2, 0xfb, 0x20, 0x8e, 0xc9, 0xc8, 0xbf, 0x85, 0xd1, 0xe9, 0x9c,
	0xdb, 0xa6, 0xae, 0x5a, 0xbc, 0x9c, 0xa9, 0xf1, 0xb7, 0x33, 0x9d, 0x7d, 0x77, 0xc0, 0x56, 0x1c,
	0x9d, 0x83, 0x15, 0xe6, 0x65, 0x49, 0xff, 0xff, 0xc3, 0x53, 0x7b, 0x7e, 0xf3, 0x3b, 0xd9, 0xad,
	0xf0, 0xaf, 0xe8, 0x0c, 0xcc, 0x14, 0x85, 0x76, 0x26, 0xcc, 0x5b, 0xed, 0xcc, 0x42, 0x77, 0xcf,
	0x1c, 0xac, 0x05, 0x0a, 0xfd, 0x45, 0xc1, 0x66, 0xa3, 0x97, 0x79, 0x03, 0x3d, 0x8e, 0x4d, 0x99,
	0x17, 0xa8, 0x97, 0xbb, 0x05, 0x27, 0xc2, 0x12, 0x85, 0x66, 0xec, 0x35, 0xd8, 0x59, 0x7d, 0x2c,
	0xb6, 0xda, 0xcb, 0x82, 0xee, 0xba, 0xe8, 0xfe, 0xb7, 0xe4, 0x74, 0x99, 0xb4, 0x72, 0xef, 0xc0,
	0x5d, 0x5e, 0x2e, 0x9a, 0x6e, 0x32, 0xc2, 0x7f, 0x4a, 0xbe, 0x85, 0xfe, 0x5d, 0x79, 0x6c, 0xb7,
	0x81, 0xe6, 0x5b, 0xfc, 0xc9, 0x51, 0xdf, 0xcc, 0xf9, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdb,
	0x08, 0xe2, 0x9d, 0x42, 0x05, 0x00, 0x00,
}
